#!/usr/bin/env python3
"""
ุฅุตูุงุญ ุงูุชุฑุฌูุงุช ุงูุนุฑุจูุฉ - ุฅูุดุงุก ููู .mo ูุนูู ูุนููุงู
"""
import os
import struct

def create_working_mo_file():
    """ุฅูุดุงุก ููู .mo ูุญุชูู ุนูู ุชุฑุฌูุงุช ูุนููุฉ"""
    
    # ุงูุชุฑุฌูุงุช ุงูุฃุณุงุณูุฉ ุงูุชู ุชุธูุฑ ูู ุงููุงุฌูุฉ
    translations = {
        # ุงูุชุฑุฌูุงุช ุงููุฑุฆูุฉ ูู ุงูุตูุฑุฉ
        "Welcome back": "ูุฑุญุจุงู ุจุนูุฏุชู",
        "Here's what's happening in your spare parts business today.": "ุฅููู ูุง ูุญุฏุซ ูู ุฃุนูุงู ูุทุน ุงูุบูุงุฑ ุงูููู.",
        "Monthly Revenue": "ุงูุฅูุฑุงุฏุงุช ุงูุดูุฑูุฉ",
        "sales this month": "ูุจูุนุงุช ูุฐุง ุงูุดูุฑ", 
        "Inventory Value": "ูููุฉ ุงููุฎุฒูู",
        "products": "ููุชุฌุงุช",
        "Monthly Revenue": "ุงูุฅูุฑุงุฏุงุช ุงูุดูุฑูุฉ",
        "sales this month": "ูุจูุนุงุช ูุฐุง ุงูุดูุฑ",
        "Today's Sales": "ูุจูุนุงุช ุงูููู",
        "transactions": "ูุนุงููุงุช",
        "Quick Actions": "ุงูุฅุฌุฑุงุกุงุช ุงูุณุฑูุนุฉ",
        "New Sale": "ุจูุน ุฌุฏูุฏ",
        "New Purchase": "ุดุฑุงุก ุฌุฏูุฏ", 
        "Add Product": "ุฅุถุงูุฉ ููุชุฌ",
        "Record Expense": "ุชุณุฌูู ูุตุฑูู",
        "View Reports": "ุนุฑุถ ุงูุชูุงุฑูุฑ",
        "Sales Trend (Last 7 Days)": "ุงุชุฌุงู ุงููุจูุนุงุช (ุขุฎุฑ 7 ุฃูุงู)",
        
        # ุงููุงุฆูุฉ ุงูุฌุงูุจูุฉ
        "Dashboard": "ููุญุฉ ุงูุชุญูู",
        "Inventory": "ุงููุฎุฒูู", 
        "Sales": "ุงููุจูุนุงุช",
        "Purchases": "ุงููุดุชุฑูุงุช",
        "Expenses": "ุงููุตุฑููุงุช",
        "Reports": "ุงูุชูุงุฑูุฑ",
        
        # ุนูุงุตุฑ ุฃุณุงุณูุฉ
        "SpareSmart": "ุณุจูุฑ ุณูุงุฑุช",
        "Products": "ุงูููุชุฌุงุช",
        "Categories": "ุงููุฆุงุช",
        "Brands": "ุงูุนูุงูุงุช ุงูุชุฌุงุฑูุฉ",
        "Suppliers": "ุงูููุฑุฏูู",
        "Customers": "ุงูุนููุงุก",
        "Settings": "ุงูุฅุนุฏุงุฏุงุช",
        "Profile": "ุงูููู ุงูุดุฎุตู",
        "Logout": "ุชุณุฌูู ุงูุฎุฑูุฌ",
        
        # ุฃุฑูุงู ูููู
        "50": "50",
        "$0": "0 ุฌ.ู",
        "$50": "50 ุฌ.ู",
        
        # ุฅุฌุฑุงุกุงุช
        "Add": "ุฅุถุงูุฉ",
        "Edit": "ุชุนุฏูู", 
        "Delete": "ุญุฐู",
        "Save": "ุญูุธ",
        "Cancel": "ุฅูุบุงุก",
        "View": "ุนุฑุถ",
        "Search": "ุจุญุซ",
        "Filter": "ุชุตููุฉ",
        
        # ุญุงูุงุช
        "Active": "ูุดุท",
        "Inactive": "ุบูุฑ ูุดุท",
        "Available": "ูุชููุฑ",
        "Out of Stock": "ููุฏ ุงููุฎุฒูู",
        "Low Stock": "ูุฎุฒูู ููุฎูุถ",
        
        # ุชูุงุฑูุฎ
        "Today": "ุงูููู",
        "Yesterday": "ุฃูุณ", 
        "This Week": "ูุฐุง ุงูุฃุณุจูุน",
        "This Month": "ูุฐุง ุงูุดูุฑ",
        "Last 7 Days": "ุขุฎุฑ 7 ุฃูุงู",
        
        # ุฑุณุงุฆู
        "Loading...": "ุฌุงุฑู ุงูุชุญููู...",
        "No data available": "ูุง ุชูุฌุฏ ุจูุงูุงุช",
        "Success": "ูุฌุญ",
        "Error": "ุฎุทุฃ",
        "Warning": "ุชุญุฐูุฑ"
    }
    
    # ุฅูุดุงุก ูุฌูุฏ ุงูุชุฑุฌูุฉ
    os.makedirs('locale/ar/LC_MESSAGES', exist_ok=True)
    
    # ุฅุนุฏุงุฏ ุงูุจูุงูุงุช ููููู ุงูุซูุงุฆู
    keys = [b'']  # ุงูููุชุงุญ ุงููุงุฑุบ ูุทููุจ
    values = [b'Content-Type: text/plain; charset=UTF-8\nLanguage: ar\n']  # ุงูุฑุฃุณ ูุทููุจ
    
    # ุฅุถุงูุฉ ุงูุชุฑุฌูุงุช
    for english, arabic in translations.items():
        keys.append(english.encode('utf-8'))
        values.append(arabic.encode('utf-8'))
    
    # ุญุณุงุจ ุงูููุงุถุน
    keyoffsets = []
    valueoffsets = []
    
    # ุจุฏุงูุฉ ุงูุจูุงูุงุช ุจุนุฏ ุงูุฌุฏุงูู
    offset = 7 * 4 + 16 * len(keys)
    
    for key in keys:
        keyoffsets.append((offset, len(key)))
        offset += len(key)
    
    for value in values:
        valueoffsets.append((offset, len(value)))
        offset += len(value)
    
    # ูุชุงุจุฉ ููู .mo
    mo_path = 'locale/ar/LC_MESSAGES/django.mo'
    with open(mo_path, 'wb') as f:
        # Magic number (little endian)
        f.write(struct.pack('<I', 0x950412de))
        # Version
        f.write(struct.pack('<I', 0))
        # Number of strings
        f.write(struct.pack('<I', len(keys)))
        # Offset of key table
        f.write(struct.pack('<I', 7 * 4))
        # Offset of value table
        f.write(struct.pack('<I', 7 * 4 + 8 * len(keys)))
        # Hash table size (0 = no hash table)
        f.write(struct.pack('<I', 0))
        # Offset of hash table
        f.write(struct.pack('<I', 0))
        
        # Key table
        for offset, length in keyoffsets:
            f.write(struct.pack('<II', length, offset))
        
        # Value table
        for offset, length in valueoffsets:
            f.write(struct.pack('<II', length, offset))
        
        # Keys
        for key in keys:
            f.write(key)
        
        # Values
        for value in values:
            f.write(value)
    
    print(f"โ ุชู ุฅูุดุงุก {mo_path} ูุน {len(translations)} ุชุฑุฌูุฉ ูุนููุฉ")
    return True

def create_comprehensive_po_file():
    """ุฅูุดุงุก ููู .po ุดุงูู"""
    
    po_content = '''# Arabic translation for SpareSmart
# Copyright (C) 2024 SpareSmart Team
msgid ""
msgstr ""
"Project-Id-Version: SpareSmart 1.0\\n"
"Language: ar\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"Plural-Forms: nplurals=6; plural=n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5;\\n"

msgid "Welcome back"
msgstr "ูุฑุญุจุงู ุจุนูุฏุชู"

msgid "Here's what's happening in your spare parts business today."
msgstr "ุฅููู ูุง ูุญุฏุซ ูู ุฃุนูุงู ูุทุน ุงูุบูุงุฑ ุงูููู."

msgid "Dashboard"
msgstr "ููุญุฉ ุงูุชุญูู"

msgid "Inventory"
msgstr "ุงููุฎุฒูู"

msgid "Sales"
msgstr "ุงููุจูุนุงุช"

msgid "Purchases"
msgstr "ุงููุดุชุฑูุงุช"

msgid "Expenses"
msgstr "ุงููุตุฑููุงุช"

msgid "Reports"
msgstr "ุงูุชูุงุฑูุฑ"

msgid "Monthly Revenue"
msgstr "ุงูุฅูุฑุงุฏุงุช ุงูุดูุฑูุฉ"

msgid "sales this month"
msgstr "ูุจูุนุงุช ูุฐุง ุงูุดูุฑ"

msgid "Inventory Value"
msgstr "ูููุฉ ุงููุฎุฒูู"

msgid "products"
msgstr "ููุชุฌุงุช"

msgid "Today's Sales"
msgstr "ูุจูุนุงุช ุงูููู"

msgid "transactions"
msgstr "ูุนุงููุงุช"

msgid "Quick Actions"
msgstr "ุงูุฅุฌุฑุงุกุงุช ุงูุณุฑูุนุฉ"

msgid "New Sale"
msgstr "ุจูุน ุฌุฏูุฏ"

msgid "New Purchase"
msgstr "ุดุฑุงุก ุฌุฏูุฏ"

msgid "Add Product"
msgstr "ุฅุถุงูุฉ ููุชุฌ"

msgid "Record Expense"
msgstr "ุชุณุฌูู ูุตุฑูู"

msgid "View Reports"
msgstr "ุนุฑุถ ุงูุชูุงุฑูุฑ"

msgid "Sales Trend (Last 7 Days)"
msgstr "ุงุชุฌุงู ุงููุจูุนุงุช (ุขุฎุฑ 7 ุฃูุงู)"

msgid "SpareSmart"
msgstr "ุณุจูุฑ ุณูุงุฑุช"

msgid "Products"
msgstr "ุงูููุชุฌุงุช"

'''
    
    with open('locale/ar/LC_MESSAGES/django.po', 'w', encoding='utf-8') as f:
        f.write(po_content)
    
    print("โ ุชู ุฅูุดุงุก ููู .po ุดุงูู")

def main():
    print("๐ง ุฅุตูุงุญ ุงูุชุฑุฌูุงุช ุงูุนุฑุจูุฉ...")
    
    # ุฅูุดุงุก ููู .po
    create_comprehensive_po_file()
    
    # ุฅูุดุงุก ููู .mo ูุนุงู
    if create_working_mo_file():
        print("๐ ุชู ุฅุตูุงุญ ุงูุชุฑุฌูุงุช ุจูุฌุงุญ!")
        print("๐ ูุฑุฌู ุฅุนุงุฏุฉ ุชุญููู ุงูุตูุญุฉ ูุฑุคูุฉ ุงูุชุบููุฑุงุช")
    else:
        print("โ ูุดู ูู ุฅุตูุงุญ ุงูุชุฑุฌูุงุช")

if __name__ == '__main__':
    main()
